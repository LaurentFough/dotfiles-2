#!/usr/bin/env bash

_mainScript_() {
  local user
  local uid

  user=$(whoami)
  uid=$(id -u "$user")

  _listTrash_() {
    local num_volumes=0
    local total_blocks=0
    local blocks
    local size

    notice "Listing items in Trash"

    # list file contents & calculate size for user's .Trash folder
    if find "/Users/${user}/.Trash" -depth 1 ! -depth 0; then
      num_volumes=$((num_volumes + 1))
      blocks=$(du -cs "/Users/${user}/.Trash" | tail -n 1 | cut -f 1)
      total_blocks=$((total_blocks + blocks))
    fi

    # list file contents & calculate size for volume-specific .Trashes folders
    for file in /Volumes/*; do
      if [ -d "$file" ]; then
        folder="${file}/.Trashes/${uid}"
        if [ -d "${folder}" ]; then
          if find "${folder}" -depth 1 ! -depth 0; then
            num_volumes=$((num_volumes + 1))
            blocks=$(du -cs "${folder}" | tail -n 1 | cut -f 1)
            total_blocks=$((total_blocks + blocks))
          fi
        fi
      fi
    done

    # convert blocks to human readable size
    size=0
    if ((total_blocks >= 2097152)); then
      size=$(bc <<<"scale=2; ${total_blocks} / 2097152")
      size="${size}GB"
    elif ((total_blocks >= 2048)); then
      size=$(bc <<<"scale=2; ${total_blocks} / 2048")
      size="${size}MB"
    else
      size=$(bc <<<"scale=2; ${total_blocks} / 2")
      size="${size}K"
    fi
    info "${size} across ${num_volumes} volume(s)."
  }

  _emptyTheTrash_() {
    # Determine if we can tell Finder to empty trash via AppleScript
    if ! ${bypassFinder} && _haveScriptableFinder_; then
      notice "Telling Finder to empty trash..."
      _execute_ -s "/usr/bin/osascript -e 'tell application \"Finder\" to empty trash'" "Trash emptied"
    else
      notice "Emptying trash..."
      # Delete the contents of user's .Trash folder
      while read -r fileToTrash; do
        [ -e "$fileToTrash" ] \
          && _execute_ -s "rm -rf \"$fileToTrash\""
      done < <(find "/Users/${user}/.Trash" -depth 1 ! -depth 0)

      # delete the contents of the volume-specific .Trashes folders
      for volume in /Volumes/*; do
        if [ -d "${volume}" ]; then
          folder="${volume}/.Trashes/${uid}"
          if [ -d "${folder}" ]; then
            while read -r fileToTrash; do
              [ -e "$fileToTrash" ] \
                && _execute_ -s "rm -rf \"$fileToTrash\""
            done < <(find "${folder}" -depth 1 ! -depth 0)
          fi
        fi
      done
    fi
  }

  _trashAFile_() {
    local baseFile
    local new
    local newBase
    local trash

    # Iterate over all files passed by user
    for userFile in "${args[@]}"; do
      if [ ! -e "${userFile}" ]; then
        warning "${userFile}: No such file or directory"
        continue
      fi

      # Determine whether we have an absolute path name to the file or not
      [[ ! "${userFile:0:1}" == "/" ]] \
        && userFile="$(_realpath_ "${userFile}")"
      baseFile="$(basename "${userFile}")"

      # Use system's 'rm' when specified
      if ${systemRM}; then
        _execute_ -s "command rm -rf \"${userFile}\"" "'${baseFile}' deleted"
        continue
      fi

      # Determine if we'll tell Finder to trash the file via AppleScript (very easy, plus free undo
      # support, but Finder must be running for the user and DOES NOT work from within `screen`)
      if ! ${bypassFinder} && _haveScriptableFinder_; then
        verbose "Telling Finder to trash '${baseFile}'..."
        _execute_ -s "/usr/bin/osascript -e 'tell application \"Finder\" to delete POSIX file \"${userFile}\"' &>/dev/null" "'${baseFile}' moved to trash"
      else
        verbose "Telling system to trash '${baseFile}'..."
        trash="/Users/${user}/.Trash/"
        # create the trash folder if necessary
        if [ ! -d "${trash}" ]; then
          _execute_ -s "mkdir \"${trash}\""
        fi
        newBase="$(basename "${userFile}")"
        new="$(_uniqueFileName_ "${trash}${newBase}")"
        _execute_ -s "mv \"${userFile}\" \"${new}\"" "'${baseFile}' moved to trash"
      fi
    done
  }

  if ${list}; then
    _listTrash_
    _safeExit_
  fi
  if ${emptyTrash}; then
    _emptyTheTrash_
    _safeExit_
  fi
  # Default behavior without flags is to delete a file
  _trashAFile_
} # end _mainScript_

filesToSource=(
  "${HOME}/dotfiles/scripting/helpers/baseHelpers.bash"
  "${HOME}/dotfiles/scripting/helpers/files.bash"
  "${HOME}/dotfiles/scripting/helpers/macOS.bash"
)
for sourceFile in "${filesToSource[@]}"; do
  [ ! -f "$sourceFile" ] \
    && {
      echo "error: Can not find sourcefile '$sourceFile'. Exiting."
      exit 1
    }
  source "$sourceFile"
done

# Set Flags
quiet=false
printLog=false
logErrors=true
verbose=false
dryrun=false
sourceOnly=false
args=()

list=false
emptyTrash=false
bypassFinder="false"
systemRM=false

# Options and Usage
# -----------------------------------
_usage_() {
  cat <<EOF
  $(basename "$0") [OPTION]... [FILE]...

  ${bold}Trash${reset} allows MacOS trashing of files instead of tempting fate with ${bold}rm${reset}.
  Anything deleted with Trash will be moved to the native MacOS trash folder.

  This script:

    - Correctly handles ${bold}trashing files on other volumes${reset}
    - Uses the ${bold}same filename renaming scheme as Finder${reset} for duplicate file names
    - Can ${bold}list trash contents${reset} w/disk usage summary
    - ${bold}Empty trash${reset}.
    - Does not require Finder to be running.

  ${bold}Options:${reset}
    -l , --list         List trash contents
    -L, --noErrorLog    Print log level error and fatal to a log (default 'true')
    -e, --empty         Empty trash contents
    -n, --dryrun        Non-destructive run.
    -s, --system        Forces native Unix 'rm' command
    -q, --quiet         Quiet (no output)
    -v, --verbose       Output more information. (Items echoed to 'verbose')
    -h, --help          Display this help and exit
    --bypassFinder      Bypasses AppleScript. Runs pure unix commands.
    --log               Print log to file
EOF
}

_parseOptions_() {
  # Iterate over options
  # breaking -ab into -a -b when needed and --foo=bar into --foo bar
  optstring=h
  unset options
  while (($#)); do
    case $1 in
      # If option is of type -ab
      -[!-]?*)
        # Loop over each character starting with the second
        for ((i = 1; i < ${#1}; i++)); do
          c=${1:i:1}
          options+=("-$c") # Add current char to options
          # If option takes a required argument, and it's not the last char make
          # the rest of the string its argument
          if [[ $optstring == *"$c:"* && ${1:i+1} ]]; then
            options+=("${1:i+1}")
            break
          fi
        done
        ;;
      # If option is of type --foo=bar
      --?*=*) options+=("${1%%=*}" "${1#*=}") ;;
      # add --endopts for --
      --) options+=(--endopts) ;;
      # Otherwise, nothing special
      *) options+=("$1") ;;
    esac
    shift
  done
  set -- "${options[@]}"
  unset options

  # Read the options and set stuff
  while [[ $1 == -?* ]]; do
    case $1 in
      -h | --help)
        _usage_ >&2
        _safeExit_
        ;;
--bypassFinder) bypassFinder=true ;;
    -s | --system) systemRM=true ;;
    -l | --list) list=true ;;
    -e | --empty) emptyTrash=true ;;
      -L | --noErrorLog) logErrors=false ;;
      -n | --dryrun) dryrun=true ;;
      -v | --verbose) verbose=true ;;
      --log) printLog=true ;;
      -q | --quiet) quiet=true ;;
      --source-only) sourceOnly=true ;;
      --force) force=true ;;
      --endopts)
        shift
        break
        ;;
      *) die "invalid option: '$1'." ;;
    esac
    shift
  done
  args+=("$@") # Store the remaining user input as arguments.
}
_parseOptions_ "$@"

# Initialize and run the script
trap '_trapCleanup_ $LINENO $BASH_LINENO "$BASH_COMMAND" "${FUNCNAME[*]}" "$0" "${BASH_SOURCE[0]}"' \
  EXIT INT TERM SIGINT SIGQUIT
set -o errtrace                           # Trap errors in subshells and functions
set -o errexit                            # Exit on error. Append '||true' if you expect an error
set -o pipefail                           # Use last non-zero exit code in a pipeline
shopt -s nullglob globstar                # Make `for f in *.txt` work when `*.txt` matches zero files
IFS=$' \n\t'                              # Set IFS to preferred implementation
# set -o xtrace                           # Uncomment to run in debug mode
set -o nounset                            # Disallow expansion of unset variables
[[ $# -eq 0 ]] && _parseOptions_ "-h"     # Uncomment to force arguments when invoking the script
# _makeTempDir_ "$(basename "$0")"        # Uncomment to create a temp directory '$tmpDir'
# _acquireScriptLock_                     # Uncomment to acquire script lock
if ! ${sourceOnly}; then _mainScript_; fi # Run script unless in 'source-only' mode
if ! ${sourceOnly}; then _safeExit_; fi   # Exit cleanly
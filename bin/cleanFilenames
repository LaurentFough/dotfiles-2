#!/usr/bin/env bash

_mainScript_() {

  _errorHandling_() {
    # This script requires the Linux gdate (as opposed to native 'date' in OSX)
    # Here we see if it's installed. If not, we install it with homebrew.
    if [[ "$OSTYPE" =~ darwin* ]]; then
      if ! command -v gdate &>/dev/null; then
        if command -v brew &>/dev/null; then
          warning "Need 'gdate' to continue. Installing via homebrew."
          brew install coreutils
          notice "'coreutils' package installed. Exiting."
          _safeExit_ "1"
        else
          fatal "'gdate' not insalled. Install 'coreutils' with homebrew."
        fi
      fi
    fi
  }
  _errorHandling_

  _isGoodFile_() {

    #Bypass file check when testing input
    ($testOutput) && return 0

    # Ensure file exists
    if [ ! -e "${userFile}" ]; then
      error "No such file or directory: '${userFile}'" "$LINENO"
      return 1
    fi
    # Ignore dotfiles
    regex="^\..*"
    if [[ "${userFile}" =~ ${regex} ]]; then
      error "${userFile}: is a dotfile." "$LINENO"
      return 1
    fi
    # Ignore certain file types
    regex="dmg"
    if [[ "${userFile##*.}" =~ ${regex} ]]; then
      error "'.${userFile##*.}' is not a supported extension" "$LINENO"
      return 1
    fi

    # Respect the Files Only flag
    if ${fileOnly}; then
      if [ ! -f "${userFile}" ]; then
        return 1
      fi
    fi

    # If all is good we...
    return 0
  }

  _parseFilename_() {
    # Here we parse the user's file into it's directory, basename, and extension.
    local fileToParse="${1:?No file provided to _parseFilename_}"

    # Grab the directory
    originalFileWithPath="$(_realpath_ "${fileToParse}")"

    verbose "originalFileWithPath: ${originalFileWithPath-}"

    filePath=$(_realpath_ -d "$originalFileWithPath") \
      && verbose "filePath: $filePath"

    # use the basename of the userFile going forward since the path is now in $filePath
    userFile=$(basename "${fileToParse}") \
      && verbose "userfile: $userFile"

    # Grab the filename without the extension
    baseFilename="${userFile%.*}" \
      && verbose "baseFilename: $baseFilename"

    # Grab the extension
    extension="$(_ext_ "${userFile}")" \
      && verbose "extension: $extension"

    # Keep track of the original file for future comparison
    originalFile="${baseFilename}${extension}" \
      && verbose "originalFile: $originalFile"
  }

  _clean_() {
    # This function attempts to clean common (or less common) Filename issues.
    local string="$1"

    # Clean special characters
    string=$(echo "${string}" | sed -E 's/[_|\.|:]/-/g' | tr -cd 'A-Za-z0-9 &-' | sed -E 's/[-]{2,}/-/g')

    # Trim unneeded whitespace
    string=$(echo "${string}" | tr -s " " | sed -E 's/ _ | - /-/g')

    # Trim unneeded characters from beginning and end
    string=$(echo "${string}" | sed -E 's/[^A-Za-z0-9]$//g' | sed -E 's/^[^A-Za-z0-9]//g' | sed -E 's/ -/ /g')

    # If $lowerCase is set, transform the file to all lower-case characters
    if ${lowerCase}; then
      string=$(echo "${string}" | tr '[:upper:]' '[:lower:]')
    fi

    echo "$string"
  }

  _findDate_() {
    # This function parses file names looking for a date in a recognizable format.
    # When a date is found we normalize it into YYYY-MM-DD format. If no date is found,
    # we add one.

    # Exit before adding a date when "clean only" flag is set
    if "${cleanOnly}"; then return; fi

    #Match "YYYY-MM-DD in Filename"
    regex="[0-9]{4}[_ -][0-9]{2}[_ -][0-9]{2}"
    if [[ "${baseFilename}" =~ ${regex} ]]; then
      verbose "\t match: YYYY-MM-DD"
      dateCommand="awk -v FS=- -v OFS=- '{print \$1,\$2,\$3}'"
      _changeFilename_ "$regex" "$dateCommand"
      return
    fi

    #Match "MM-DD-YYYY in Filename"
    regex="[0-9]{2}[_ -][0-9]{2}[_ -][0-9]{4}"
    if [[ "${baseFilename}" =~ ${regex} ]]; then
      verbose "\t match: MM-DD-YYYY"
      dateCommand="awk -v FS=- -v OFS=- '{print \$3,\$1,\$2}'"
      _changeFilename_ "$regex" "$dateCommand"
      return
    fi

    # Match "MMDDYYYY or YYYYMMDD in Filename"
    regex='(^|[[:space:]]|-)[0-9]{8}($|[[:space:]]|-)'
    if [[ "${baseFilename}" =~ $regex ]]; then
      yearRegex="(^|[[:space:]]|-)20[0-9][0-9][0-9][0-9][0-9][0-9]"
      regex="[0-9]{8}"
      if [[ "${baseFilename}" =~ ${yearRegex} ]]; then
        verbose "\t match: YYYYMMDD"
        dateCommand="sed -E 's/([0-9]{4})([0-9]{2})([0-9]{2})/\1-\2-\3/g' | awk -v FS=- -v OFS=- '{print \$1,\$2,\$3}'"
      else
        verbose "\t match: MMDDYYYY"
        dateCommand="sed -E 's/([0-9]{2})([0-9]{2})([0-9]{4})/\1-\2-\3/g' | awk -v FS=- -v OFS=- '{print \$3,\$1,\$2}'"
      fi
      _changeFilename_ "$regex" "$dateCommand"
      return
    fi

    # Match "MMDDYY or YYMMDD in Filename"
    regex="(^|[[:space:]]|-)[0-9]{6}($|[[:space:]]|-)"
    if [[ "${baseFilename}" =~ ${regex} ]]; then
      yearRegex="1[3-9][0-9]{4}"
      regex="[0-9]{6}"
      if [[ "${baseFilename}" =~ ${yearRegex} ]]; then
        verbose "\t match: YYMMDD"
        dateCommand="sed -E 's/([0-9]{2})([0-9]{2})([0-9]{2})/20\1-\2-\3/g' | awk -v FS=- -v OFS=- '{print \$1,\$2,\$3}'"
      else
        verbose "\t match: MMDDYY"
        dateCommand="sed -E 's/([0-9]{2})([0-9]{2})([0-9]{2})/\1-\2-20\3/g' | awk -v FS=- -v OFS=- '{print \$3,\$1,\$2}'"
      fi
      _changeFilename_ "$regex" "$dateCommand"
      return
    fi

    # Match "MM-DD-YY or YY-MM-DD  in Filename"
    regex="[0-9]{2}[_ -][0-9]{2}[_ -][0-9]{2}"
    if [[ "${baseFilename}" =~ ${regex} ]]; then
      yearRegex="1[3-9][_ -][0-9][0-9][_ -][0-9][0-9]"
      if [[ "${baseFilename}" =~ ${yearRegex} ]]; then
        verbose "\t match: YY-MM-DD"
        dateCommand="awk -v FS=- -v OFS=- '{print 20\$1,\$2,\$3}'"
      else
        verbose "\t match: MM-DD-YY"
        dateCommand="awk -v FS=- -v OFS=- '{print 20\$3,\$1,\$2}'"
      fi
      _changeFilename_ "$regex" "$dateCommand"
      return
    fi

    # Match "M DD YY in Filename"
    regex="[0-9]{1}[_ -][0-9]{2}[_ -][0-9]{2}"
    if [[ "${baseFilename}" =~ ${regex} ]]; then
      verbose "\t match: M DD YY "
      dateCommand="sed -E 's/([0-9])[_ -]([0-9]{2})[_ -]([0-9]{2})/0\1-\2-20\3/g' | awk -v FS=- -v OFS=- '{print \$3,\$1,\$2}'"
      _changeFilename_ "$regex" "$dateCommand"
      return
    fi

    # Match "M D YY in Filename"
    regex="[0-9][_ -][0-9][_ -][0-9][0-9]"
    if [[ "${baseFilename}" =~ ${regex} ]]; then
      verbose "\t match: M D YY "
      dateCommand="sed -E 's/([0-9])[_ -]([0-9])[_ -]([0-9]{2})/0\1-0\2-20\3/g' | awk -v FS=- -v OFS=- '{print \$3,\$1,\$2}'"
      _changeFilename_ "$regex" "$dateCommand"
      return
    fi

    # Match month-DD-YYYY
    regex="([Jj](an|anuary)|[Ff](eb|ebruary)|[Mm](ar|arch)|[Aa](pr|pril)|[Mm]ay|[Jj](un|une)|[Jj](ul|uly)|[Aa](ug|ugust)|[Ss](ep|ept|eptember)|[Oo](ct|ctober)|[Nn](ov|ovember)|[Dd](ec|ecember))[_ -][0-9]{2}[_ -][0-9]{4}"
    if [[ "${baseFilename}" =~ ${regex} ]]; then
      verbose "\t match: Month-DD-YYYY"
      dateCommand='{ read ddate ; gdate -d "$ddate" +%Y-%m-%d ; }'
      _changeFilename_ "$regex" "$dateCommand"
      return
    fi

    # Match month-DD-YY
    regex="([Jj](an|anuary)|[Ff](eb|ebruary)|[Mm](ar|arch)|[Aa](pr|pril)|[Mm]ay|[Jj](un|une)|[Jj](ul|uly)|[Aa](ug|ugust)|[Ss](ep|ept|eptember)|[Oo](ct|ctober)|[Nn](ov|ovember)|[Dd](ec|ecember))[_ -][0-9]{2}[_ -][0-9]{2}"
    if [[ "${baseFilename}" =~ ${regex} ]]; then
      verbose "\t match: Month-DD-YY"
      dateCommand='awk -v FS=- -v OFS=- "{print \$1,\$2,20\$3}" | { read ddate ; gdate -d "$ddate" +%Y-%m-%d ; }'
      _changeFilename_ "$regex" "$dateCommand"
      return
    fi

    # Match month-YYYY
    regex="([Jj](an|anuary)|[Ff](eb|ebruary)|[Mm](ar|arch)|[Aa](pr|pril)|[Mm]ay|[Jj](un|une)|[Jj](ul|uly)|[Aa](ug|ugust)|[Ss](ep|ept|eptember)|[Oo](ct|ctober)|[Nn](ov|ovember)|[Dd](ec|ecember))[_ -][0-9]{4}"
    if [[ "${baseFilename}" =~ ${regex} ]]; then
      verbose "\t match: Month-YYYY"
      dateCommand='echo "01 $origDate" | { read ddate ; gdate -d "$ddate" +%Y-%m-%d ; }'
      _changeFilename_ "$regex" "$dateCommand"
      return
    fi

    # Act on files which don't match known patterns
    verbose "\t No recognized date in filename. Using creation date or today"

    # Add a date to files which don't already have one.
    # use mdls to find the creation date of the file. if it exists, use that. if not, use today
    if ${removeDates}; then return; fi # don't do this step if we are trying to remove dates
    if mdls -raw -name kMDItemContentCreationDate "${originalFileWithPath}" &>/dev/null; then
      creationDate=$(mdls -raw -name kMDItemContentCreationDate "${originalFileWithPath}")
      if [[ "$creationDate" =~ null ]]; then
        newDate="$(date +%Y-%m-%d)"
      else
        newDate=$(echo "$creationDate" | awk 'BEGIN { FS="[ ]" } ; { print $1 }')
      fi
    else
      newDate="$(date +%Y-%m-%d)"
    fi
  }

  _changeFilename_() {
    local regex="$1"
    local dateCommand="$2"

    # Grab existing date based on the regex from the Filename
    origDate=$(echo "${baseFilename}" | grep -Eo "${regex}")
    # Clean trailing characters from date (if any)
    origDate="${origDate/%[- _]/}"

    # Strip the existing date out of the Filename
    sedCommand="echo ${baseFilename} | sed 's/${origDate}//g'"
    baseFilename=$(eval "${sedCommand}") # no longer has a date in it

    # format the existing date with '-' separators
    origDate="${origDate//[. _]/-}"

    # Format the existing date into the new date based on the dateCommand variable passed
    # from each RegEx below
    getNewDate="echo ${origDate} | ${dateCommand}"
    newDate=$(eval "${getNewDate}")
    verbose "\t origdate: $origDate newDate: $newDate"
  }

  _rebuildFileName_() {
    # piece the filename back together

    # Ensure file extensions are lowercase
    extension=$(echo "${extension}" | tr '[:upper:]' '[:lower:]')

    # Add the date back to the filename if we're not removing dates
    if ! ${removeDates}; then
      baseFilename="${newDate-} ${baseFilename}"
    fi

    # Clean the name again
    baseFilename="$(_clean_ "$baseFilename")"

    # Add the extension back to the filename
    newFilename="${baseFilename}${extension}"
  }

  _renameFiles_() {
    # Renames the files. If the new Filename exists, we keep incrementing
    # a number to append to the Filename to mimic Finder

    # If the filename has not changed then do nothing
    if [[ "${newFilename}" == "${originalFile}" ]]; then
      if ${nonInteractive}; then
        echo "${originalFileWithPath}"
      else
        notice "${userFile}: No change"
      fi
      return
    fi

    newFile="$(_uniqueFileName_ "${filePath}/${newFilename}")" \
      && verbose "\t newFile: $newFile"

    if ! ${testOutput}; then
      _execute_ -s "mv \"${originalFileWithPath}\" \"${newFile}\"" "${userFile} --> ${newFile##*/}"
    else
      notice "${userFile} --> ${newFile##*/}"
    fi
  }

  # Run the script functions
  for userFile in "${args[@]}"; do
    verbose "file: ${bold}${userFile}${reset}"

    if _isGoodFile_; then
      _parseFilename_ "$userFile"
      baseFilename="$(_clean_ "$baseFilename")" # Clean the filename
      _findDate_
      _rebuildFileName_
      _renameFiles_
      if ${nonInteractive}; then echo "${newFile-}"; fi
    fi
  done

} # end _mainScript_

filesToSource=(
  "${HOME}/dotfiles/scripting/helpers/baseHelpers.bash"
  "${HOME}/dotfiles/scripting/helpers/files.bash"
)

for sourceFile in "${filesToSource[@]}"; do
  [ ! -f "$sourceFile" ] \
    && {
      echo "error: Can not find sourcefile '$sourceFile'. Exiting."
      exit 1
    }

  source "$sourceFile"
done

# Set Flags
quiet=false
printLog=false
logErrors=true
verbose=false
force=false
dryrun=false
sourceOnly=false
fileOnly=false
declare -a args=()

cleanOnly=false
nonInteractive=false
lowerCase=false
ignoreFile=false
removeDates=false
testOutput=false

_usage_() {
  cat <<EOF

  $(basename "$0") [OPTION]... [FILE]...

  Performs the following operations on the filename:

      * Prepends a date in the format YYYY-MM-DD
      * Cleans up special characters
      * Trims unneeded whitespace
      * Moves all .jpeg extensions to .jpg
      * Ensures that all file extensions are lowercase

  ${bold}Dates in filenames${reset}
  The date to be added to the filename is discerned by matching the following rules. The
  first of these to be true is used as the date.

      1) A date already exists in the filename.
        In this scenario, the existing date is removed from the filename and is added
        to the front in the form YYYY-MM-DD. The known patterns are:

          * MMDDYYYY          * YYYYMMDD          * MMDDYY
          * YYMMDD            * MM-DD-YYYY        * MM-DD-YY
          * YY-MM-DD          * M-DD-YY           * M-D-YY
          * YYYY-MM-DD        * mon-DD-YYYY       * mon-DD-YY
          * month-DD-YYYY     * month-DD-YY

      2) The date the file was created.
      3) Today's date.

  ${bold}Options:${reset}

    -C, --clean       Cleans a filename of special characters and normalizes dates
                      already in the filename but does NOT prepend a date if none
                      exists
    -R, --removeDate  Removes dates from filenames
    -L, --lower       Transforms the filename to all lower case characters
    -F, --fileOnly    Ignore directories and only clean the names of files

    --nonInteractive  Assumes the script is being called from another script. The only
                      output in this mode is an exit code and the cleaned name of the file
                      passed to the script

    -e, --noErrorLog  Print log level error and fatal to a log (default 'true')
    -T, --test        Takes a string of input and shows the result that the script would produce

    -n, --dryrun      Non-destructive run. Will report on changes that would have
                      been made.
    -q, --quiet       Quiet (no output to terminal)
    -l, --log         Print log to file
    -v, --verbose     Output more information.
    -h, --help        Display this help and exit
        --source-only Bypasses main script functionality to allow unit tests of functions

  ${bold}Examples:${reset}

    Original Filename: 'filename (with special chars & and date) 08312016.txt'
    Cleaned Filename : '2016-08-31 filename with special chars-and date.txt'

    Original Filename: 'filename.txt'
    Cleaned Filename : '2016-03-31 filename.txt'
EOF
}

_parseOptions_() {
  # Iterate over options
  # breaking -ab into -a -b when needed and --foo=bar into --foo bar
  optstring=h
  unset options
  while (($#)); do
    case $1 in
      # If option is of type -ab
      -[!-]?*)
        # Loop over each character starting with the second
        for ((i = 1; i < ${#1}; i++)); do
          c=${1:i:1}
          options+=("-$c") # Add current char to options
          # If option takes a required argument, and it's not the last char make
          # the rest of the string its argument
          if [[ $optstring == *"$c:"* && ${1:i+1} ]]; then
            options+=("${1:i+1}")
            break
          fi
        done
        ;;
      # If option is of type --foo=bar
      --?*=*) options+=("${1%%=*}" "${1#*=}") ;;
      # add --endopts for --
      --) options+=(--endopts) ;;
      # Otherwise, nothing special
      *) options+=("$1") ;;
    esac
    shift
  done
  set -- "${options[@]}"
  unset options

  # Read the options and set stuff
  while [[ $1 == -?* ]]; do
    case $1 in
      -h | --help)
        _usage_ >&2
        _safeExit_
        ;;
      -T | --test)
        testOutput=true
        dryrun=true
        ;;
      -C | --clean) cleanOnly=true ;;
      -R | --removeDate) removeDates=true ;;
      -L | --lower) lowerCase=true ;;
      -e | --noErrorLog) logErrors=false ;;
      -F | --fileOnly) fileOnly=true ;;
      -n | --dryrun) dryrun=true ;;
      -v | --verbose) verbose=true ;;
      -l | --log) printLog=true ;;
      -q | --quiet) quiet=true ;;
      --nonInteractive)
        nonInteractive=true
        quiet=true
        ;;
      --source-only) sourceOnly=true ;;
      --force) force=true ;;
      --endopts)
        shift
        break
        ;;
      *) die "invalid option: '$1'." ;;
    esac
    shift
  done
  args+=("$@") # Store the remaining user input as arguments.
}
_parseOptions_ "$@"

# Initialize and run the script
trap '_trapCleanup_ $LINENO $BASH_LINENO "$BASH_COMMAND" "${FUNCNAME[*]}" "$0" "${BASH_SOURCE[0]}"' \
  EXIT INT TERM SIGINT SIGQUIT
set -o errtrace                           # Trap errors in subshells and functions
set -o errexit                            # Exit on error. Append '||true' if you expect an error
set -o pipefail                           # Use last non-zero exit code in a pipeline
shopt -s nullglob globstar                # Make `for f in *.txt` work when `*.txt` matches zero files
IFS=$' \n\t'                              # Set IFS to preferred implementation
# set -o xtrace                           # Uncomment to run in debug mode
set -o nounset                            # Disallow expansion of unset variables
[[ $# -eq 0 ]] && _parseOptions_ "-h"     # Uncomment to force arguments when invoking the script
# _makeTempDir_ "$(basename "$0")"        # Uncomment to create a temp directory '$tmpDir'
# _acquireScriptLock_                     # Uncomment to acquire script lock
if ! ${sourceOnly}; then _mainScript_; fi # Run script unless in 'source-only' mode
if ! ${sourceOnly}; then _safeExit_; fi   # Exit cleanly

#!/usr/bin/env bash

version="1.0.0"

_mainScript_() {

  [[ "$OSTYPE" != "darwin"* ]] \
    && fatal "We are not on macOS" "$LINENO"

  if ! command -v brew &>/dev/null; then fatal "Can not continue wthout homebrew" "$LINENO"; fi

  notice "Updating Homebrew..."
  _execute_ -vp "brew update"
  _execute_ -vp "brew upgrade"

  _upgradeCasks_() {
    notice "Updating casks ..."
    local cask casks

    # Sometimes license files can get old and cause 'brew cask' to throw errors.  This can help
    # identify the culprits
    # shellcheck disable=2046,2063
    while read -r cask; do
      verbose "If 'brew cask list' throws license errors attempt to reinstall '$cask'"
      # find $(brew --prefix)/Caskroom/${cask}/.metadata -name "*.rb" -exec sed -i'' -e 's/license/#license/' {} \;
      #_execute_ "brew cask reinstall $cask"
    done < <(grep -ilr --include \*.rb license $(brew --prefix)/Caskroom/*/.metadata | awk -F '/' '{print $5}' | sort -u)

    # Now we update casks
    if [ "$(brew cask outdated --greedy --verbose | awk '$4 != "latest" {print $1}')" ]; then
      while read -r c; do
        version=$(brew cask info $c | sed -n "s/$c:\ \(.*\)/\1/p")
        installed=$(find "/usr/local/Caskroom/$c" -type d -maxdepth 1 -maxdepth 1 -name "$c")
        # if [[ "$version" == "latest" ]]; then
        #   # info "Cask '$c' does not report version numbers. Update individually."
        #   continue
        # fi
        notice "'${c}' requires update."
        verbose "From: $installed"
        verbose "To: $version"
        _execute_ -vp "brew cask uninstall \"$c\" --force" "Uninstalled '$c'"
        _execute_ -vp "brew cask install \"$c\" --force" "Reinstalled '$c'"
      done < <(brew cask outdated --greedy --verbose | awk '$4 != "latest" {print $1}')
    else
      info "All casks up to date"
    fi
  }
  _upgradeCasks_

  notice "Cleaning Up..."
  _execute_ -vp "brew cleanup"
  _execute_ -vp "brew prune"

  _updateBrewfile_() {
    local t="$(mktemp "${tmpDir}/XXXXXXXXXXXXX")"
    local i=0
    local brewfile="${HOME}/dotfiles/config/shell/Brewfile"

    [ -f "$brewfile" ] \
      || {
        error "Can not find brewfile" "$LINENO"
        return 0
      }

    # Write temp brewfile
    brew bundle dump --file="$t" --force

    notice "Checking Brewfile ..."
    if [[ $(comm -2 -3 --nocheck-order "$t" "$brewfile") != "" ]]; then
      info "These lines will be added to Brewfile"
      comm -2 -3 --nocheck-order <(sort "$t") <(sort "$brewfile")
      i=1
    fi
    if [[ $(comm -1 -3 --nocheck-order "$t" "$brewfile") != "" ]]; then
      info "These lines will be removed"
      comm -1 -3 --nocheck-order <(sort "$t") <(sort "$brewfile")
      i=1
    fi
    if [[ $i -eq 1 ]] && _seekConfirmation_ "Overwrite Brewfile with these changes"; then
      _execute_ "cp \"$t\" \"$brewfile\"" "Writing changes to '$brewfile'"\
        || error "Could not overwrite '$brewfile'" "$LINENO"
    else
      info "No changes to Brewfile"
    fi
  }
  _updateBrewfile_

} # end _mainScript_

_sourceHelperFiles_() {
  local filesToSource
  local sourceFile

  filesToSource=(
    "${HOME}/dotfiles/scripting/helpers/baseHelpers.bash"
  )
  for sourceFile in "${filesToSource[@]}"; do
    [ ! -f "$sourceFile" ] \
      && {
        echo "error: Can not find sourcefile '$sourceFile'. Exiting."
        exit 1
      }
    source "$sourceFile"
  done
}
_sourceHelperFiles_

# Set Base Variables
# ----------------------
scriptName=$(basename "$0")

# Set Flags
quiet=false
printLog=false
logErrors=true
verbose=false
force=false
strict=false
dryrun=false
debug=false
sourceOnly=false
args=()

# Set Temp Directory
tmpDir="${TMPDIR:-/tmp/}$(basename "$0").$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  fatal "Could not create temporary directory! Exiting." "$LINENO"
}

# Options and Usage
# -----------------------------------
_usage_() {
  echo -n "${scriptName} [OPTION]... [FILE]...

This script upgrades  Mac OS applications managed by Homebrew Cask

 ${bold}Option Flags:${reset}

  -L, --noErrorLog  Don't print log level error and fatal to a log (default 'false')
  -l, --log         Print log to file
  -n, --dryrun      Non-destructive. Makes no permanent changes.
  -q, --quiet       Quiet (no output)
  -s, --strict      Exit script with null variables.  i.e 'set -o nounset'
  -v, --verbose     Output more information. (Items echoed to 'verbose')
  -d, --debug       Runs script in BASH debug mode (set -x)
  -h, --help        Display this help and exit
      --version     Output version information and exit
      --source-only Bypasses main script functionality to allow unit tests of functions
      --force       Skip all user interaction.  Implied 'Yes' to all actions.
"
}

# Iterate over options breaking -ab into -a -b when needed and --foo=bar into
# --foo bar
optstring=h
unset options
while (($#)); do
  case $1 in
    # If option is of type -ab
    -[!-]?*)
      # Loop over each character starting with the second
      for ((i = 1; i < ${#1}; i++)); do
        c=${1:i:1}

        # Add current char to options
        options+=("-$c")

        # If option takes a required argument, and it's not the last char make
        # the rest of the string its argument
        if [[ $optstring == *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;

    # If option is of type --foo=bar
    --?*=*) options+=("${1%%=*}" "${1#*=}") ;;
    # add --endopts for --
    --) options+=(--endopts) ;;
    # Otherwise, nothing special
    *) options+=("$1") ;;
  esac
  shift
done
set -- "${options[@]}"
unset options

# Print help if no arguments were passed.
# Uncomment to force arguments when invoking the script
# -------------------------------------
# [[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 == -?* ]]; do
  case $1 in
    -h | --help)
      _usage_ >&2
      _safeExit_
      ;;
    -L | --noErrorLog) logErrors=false ;;
    -n | --dryrun) dryrun=true ;;
    -v | --verbose) verbose=true ;;
    -l | --log) printLog=true ;;
    -q | --quiet) quiet=true ;;
    -s | --strict) strict=true ;;
    -d | --debug) debug=true ;;
    --version)
      echo "$(basename $0) ${version}"
      _safeExit_
      ;;
    --source-only) sourceOnly=true ;;
    --force) force=true ;;
    --endopts)
      shift
      break
      ;;
    *)
      echo "invalid option: '$1'."
      exit 1
      ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")

# Trap bad exits with your cleanup function
trap '_trapCleanup_ $LINENO $BASH_LINENO "$BASH_COMMAND" "${FUNCNAME[*]}" "$0" "${BASH_SOURCE[0]}"' \
  EXIT INT TERM SIGINT SIGQUIT

# Set IFS to preferred implementation
IFS=$' \n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errtrace
set -o errexit

# Force pipelines to fail on the first non-zero status code.
set -o pipefail

# Run in debug mode, if set
if ${debug}; then set -x; fi

# Exit on empty variable
if ${strict}; then set -o nounset; fi

# Run your script unless in 'source-only' mode
if ! ${sourceOnly}; then _mainScript_; fi

# Exit cleanly
if ! ${sourceOnly}; then _safeExit_; fi

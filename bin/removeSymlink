#!/usr/bin/env bash

version="1.0.0"

function _mainScript_() {

  function _errorHandling_() {
    # This script requires the Linux gdate (as opposed to native 'date' in OSX)
    # Here we see if it's installed. If not, we install it with homebrew.
    if ! command -v dirname &> /dev/null; then
      warning "Need 'dirname' to continue. Installing via homebrew."
      brew install coreutils
      success "'coreutils' package installed. Exiting."
      _safeExit_ "1"
    fi
  }
  _errorHandling_

  # Cofiguration variables:
  manifest="${HOME}/.mackup/my-files.cfg"
  ! [ -f "${manifest}" ] && die "Can not find ${manifest}."

  links=( "${args[@]}" )

  if [[ ${#links[@]} == 0 ]]; then die "No link specified"; fi

  # Work through the links
  for link in "${links[@]}"; do

    # Confirm links is actually a symlink
    if [ ! -h "${link}" ]; then # test that files are links(s)
      die "'${link}': either does not exist or is not a symlink."
    fi

    dir=$(dirname "${link}")
    reltarget=$(readlink "${link}")
    case "${reltarget}" in
        /*) abstarget="${reltarget}";;
        *)  abstarget="${dir}"/"${reltarget}";;
    esac
    execute "rm -f ${link}" "Remove symlink"
    execute "cp -af ${abstarget} ${link}" "Copy original in place of symlink"

    # If requested, remove the originating file
    if ${replaceSymlink}; then
      if seek_confirmation "Delete originating file?"; then
        execute "rm -rf ${abstarget}" "Delete original file"
      fi
    fi

    if ${removeManifest}; then
      execute "sed -e "s/${link}//g" -i .backup ${manifest}" "Remove '${link}' from ${manifest}"
    fi

  done


}

function _trapCleanup_() {
  echo ""
  die "Exit trapped. In function: '${FUNCNAME[*]:1}'"
}

function _safeExit_() {
  trap - INT TERM EXIT
  exit ${1:-0}
}

# Set Base Variables
# ----------------------
scriptName=$(basename "$0")

# Set Flags
quiet=false;      printLog=false;       verbose=false;
force=false;      strict=false;         dryrun=false;
debug=false;      args=();

replaceSymlink=false;           removeManifest=false;

# Set Colors
bold=$(tput bold);        reset=$(tput sgr0);         purple=$(tput setaf 171);
red=$(tput setaf 1);      green=$(tput setaf 76);      tan=$(tput setaf 3);
blue=$(tput setaf 38);    underline=$(tput sgr 0 1);

function _alert_() {
  if [ "${1}" = "error" ]; then local color="${bold}${red}"; fi
  if [ "${1}" = "warning" ]; then local color="${red}"; fi
  if [ "${1}" = "success" ]; then local color="${green}"; fi
  if [ "${1}" = "debug" ]; then local color="${purple}"; fi
  if [ "${1}" = "header" ]; then local color="${bold}${tan}"; fi
  if [ "${1}" = "input" ]; then local color="${bold}"; fi
  if [ "${1}" = "dryrun" ]; then local color="${blue}"; fi
  if [ "${1}" = "info" ] || [ "${1}" = "notice" ]; then local color=""; fi
  # Don't use colors on pipes or non-recognized terminals
  if [[ "${TERM}" != "xterm"* ]] || [ -t 1 ]; then color=""; reset=""; fi

  # Print to console when script is not 'quiet'
  if ${quiet}; then return; else
   echo -e "$(date +"%r") ${color}$(printf "[%7s]" "${1}") ${_message}${reset}";
  fi

}

function die ()       { local _message="${*} Exiting."; echo -e "$(_alert_ error)"; _safeExit_ "1";}
function error ()     { local _message="${*}"; echo -e "$(_alert_ error)"; }
function warning ()   { local _message="${*}"; echo -e "$(_alert_ warning)"; }
function notice ()    { local _message="${*}"; echo -e "$(_alert_ notice)"; }
function info ()      { local _message="${*}"; echo -e "$(_alert_ info)"; }
function debug ()     { local _message="${*}"; echo -e "$(_alert_ debug)"; }
function success ()   { local _message="${*}"; echo -e "$(_alert_ success)"; }
function dryrun()     { local _message="${*}"; echo -e "$(_alert_ dryrun)"; }
function input()      { local _message="${*}"; echo -n "$(_alert_ input)"; }
function header()     { local _message="== ${*} ==  "; echo -e "$(_alert_ header)"; }
function verbose()    { if ${verbose}; then debug "$@"; fi }


# Options and Usage
# -----------------------------------
usage() {
  echo -n "${scriptName} [OPTION]... [FILE]...

This script will replace symbolic links with their original file.  By default it will COPY
a version of the original file over the symlink's location.  Specifying the flag '-r' will
delete the source file of the symlink after copying itself to the symlink's location.

In addition, this script can help you clean up files that are backed up using Mackup on
a Macintosh computer.  If you are not familiar with Mackup, more information can be
found here: https://github.com/lra/mackup . Specifying the -m feature will search the mackup
configuration file for instances of your specified file and, if found, will remove it.  When
this is invoked, a backup configuration file is created.

 ${bold}Options:${reset}
  -m, --manifest    Remove file from Mackup manifest configuration file.
  -r, --replace     Replaces the symlink with the original file AND removes the
                    original after copying

  -n, --dryrun      Non-destructive run. Makes no changes.
  -v, --verbose     Output more information. (Items echoed to 'verbose')
  -d, --debug       Runs script in BASH debug mode (set -x)
  -h, --help        Display this help and exit
  -q, --quiet       Quiet (no output)
  -s, --strict      Exit script with null variables.  i.e 'set -o nounset'
      --version     Output version information and exit
"
}

# Iterate over options breaking -ab into -a -b when needed and --foo=bar into
# --foo bar
optstring=h
unset options
while (($#)); do
  case $1 in
    # If option is of type -ab
    -[!-]?*)
      # Loop over each character starting with the second
      for ((i=1; i < ${#1}; i++)); do
        c=${1:i:1}

        # Add current char to options
        options+=("-$c")

        # If option takes a required argument, and it's not the last char make
        # the rest of the string its argument
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;

    # If option is of type --foo=bar
    --?*=*) options+=("${1%%=*}" "${1#*=}") ;;
    # add --endopts for --
    --) options+=(--endopts) ;;
    # Otherwise, nothing special
    *) options+=("$1") ;;
  esac
  shift
done
set -- "${options[@]}"
unset options

# Print help if no arguments were passed.
# Uncomment to force arguments when invoking the script
# -------------------------------------
[[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ $1 = -?* ]]; do
  case $1 in
    -m|--manifest) removeManifest=true ;;
    -r|--replace) replaceSymlink=true ;;
    -h|--help) usage >&2; _safeExit_ ;;
    --version) echo "$(basename $0) ${version}"; _safeExit_ ;;
    -n|--dryrun) dryrun=true ;;
    -v|--verbose) verbose=true ;;
    -q|--quiet) quiet=true ;;
    -s|--strict) strict=true;;
    -d|--debug) debug=true;;
    --endopts) shift; break ;;
    *) die "invalid option: '$1'." ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")


function seek_confirmation() {
  # Seeks a Yes or No answer to a question.  Usage:
  #   if seek_confirmation "Answer this question"; then
  #     something
  #   fi
  input "$@"
  while true; do
    read -r -p " (y/n) " yn
    case $yn in
      [Yy]* ) return 0;;
      [Nn]* ) return 1;;
      * ) input "Please answer yes or no.";;
    esac
  done
}

function execute() {
  # execute - wrap an external command in 'execute' to push native output to /dev/null
  #           and have control over the display of the results.  In "dryrun" mode these
  #           commands are not executed at all. In Verbose mode, the commands are executed
  #           with results printed to stderr and stdin
  #
  # usage:
  #   execute "cp -R somefile.txt someNewFile.txt" "Optional message to print to user"
  if ${dryrun}; then
    dryrun "${2:-$1}"
  else
    #set +e # don't exit script if execute fails
    if $verbose; then
      $1
    else
      $1 &> /dev/null
    fi
    if [ $? -eq 0 ]; then
      success "${2:-$1}"
    else
      warning "${2:-$1}"
    fi
    # set -e
  fi
}

# Trap bad exits with your cleanup function
trap _trapCleanup_ EXIT INT TERM

# Set IFS to preferred implementation
IFS=$' \n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
# if using the 'execute' function this must be disabled for warnings to be shown if tasks fail
#set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Exit the script if a command fails
set -e

# Run your script
_mainScript_

# Exit cleanly
_safeExit_